#!/bin/bash
function doesUserExist {
	if id "$1" > /dev/null 2>&1; then
		return 1
	else
		return 0
	fi
}

dockerConfigsPath="/root/kronovanet_docker"
if [ ! -d "$dockerConfigsPath" ]; then
  echo "Creating folder for kronovanet docker container..."
  mkdir -p $dockerConfigsPath
fi

cd /etc/openvpn/easy-rsa

if [ ! -f "$dockerConfigsPath/INITIALIZED_OPENVPN" ]; then
	echo "Initialize configs..."
	echo "Preparing easy-rsa..."
	echo "export KEY_COUNTRY=\"${EASYRSA_COUNTRY}\"" >> /etc/openvpn/easy-rsa/vars
	echo "export KEY_PROVINCE=\"${EASYRSA_PROVINCE}\"" >> /etc/openvpn/easy-rsa/vars
	echo "export KEY_CITY=\"${EASYRSA_CITY}\"" >> /etc/openvpn/easy-rsa/vars
	echo "export KEY_ORG=\"${EASYRSA_ORG}\"" >> /etc/openvpn/easy-rsa/vars
	echo "export KEY_EMAIL=\"${EASYRSA_EMAIL}\"" >> /etc/openvpn/easy-rsa/vars
	echo "export KEY_OU=\"${EASYRSA_OU}\"" >> /etc/openvpn/easy-rsa/vars
	echo "export KEY_NAME=\"${EASYRSA_NAME}\"" >> /etc/openvpn/easy-rsa/vars

	mkdir keys
	touch keys/index.txt
	echo 01 > keys/serial
	. ./vars
	./clean-all

	echo "Build root certificate..."
	./pkitool --initca

	echo "Build server certificate..."
	./pkitool --server server

	echo "Build diffie hellman parameters..."
	./build-dh

	touch "$dockerConfigsPath/INITIALIZED_OPENVPN"
else
	echo "Configs already initialized. If you want to reinit remove the file /INITIALIZED_OPENVPN from container!"
fi

echo "Search and synchronize users with config..."
. ./vars

userLoop=1
userCount=1
while [ "$userLoop" ]
do
	envNameUser="OPENVPN_USER_$userCount"
	envNamePass="OPENVPN_PASS_$userCount"
	envValueUser=${!envNameUser}
	envValuePass=${!envNamePass}

	if ([ -z $envValueUser ] || [ -z $envValuePass ]); then
		userLoop=0
		continue
	fi

	echo "Checking user $envValueUser..."
	if doesUserExist $envValueUser; then
		echo "Adding user $envValueUser..."
		useradd "$envValueUser" -M -s /bin/false -p $envValuePass
	else
		echo "User existing."
	fi

	echo "Checking user certificates for $envValueUser..."
	certificatePath="/etc/openvpn/easy-rsa/keys"
	certificateName="user_cert_$envValueUser"

	if ([ -f "$certificatePath/$certificateName.crt" ] && [ -f "$certificatePath/$certificateName.csr" ] && [ -f "$certificatePath/$certificateName.key" ]); then
		echo "Certificates existing."
	else
		echo "Generating key..."
		./pkitool $certificateName
		echo "Generating key pass..."
		./pkitool --pass $certificateName
		echo "Creating comprimised file for user config..."
		tar cfvz /opt/certs/openvpn_$envValueUser.tar.gz keys/ca.crt keys/$certificateName.crt keys/$certificateName.key
		echo "SAVED TO /opt/certs/openvpn_$envValueUser.tar.gz !"
	fi
	userCount=$((userCount + 1))
done

# todo: add hooks and start openvpn at different ports (default configs for 443 TCP; 1194 UDP)
cd ..
echo "Starting openvpn servers..."
openvpn --config udp1194.config &
openvpn --config tcp443.config &

echo "Done!"
tail -f log/openvpn-status.log

exit
